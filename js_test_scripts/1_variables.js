// * 1) объявление переменной 
// let a;  значение undefined

// * 2) инициализация / присвоение значения 
//let = '123';  значение '123'

// * 3) область видимости переменной:   
//     где в коде программы будут доступны переменные и функции. Глобальная и локальная (global scope и function scope)
// * 4) поднятие, вплытие  переменной  hosting

// TODO отличие let ( const )  vs  var : 
// TODO   -  let блочная область видимости /  var функциональная
// TODO   -  hosting: интерпретатор в JavaScript неявно обьявляет и присваивает var значение undefined в самом начале кода / let когда доходит
// TODO   -  Переменные объявленные черех 'var' - становятся свойством глобального обьекта Window.


// TODO  let VS const:
// TODO  у const должна быть явная инициализация при обьявлении. т.е. нельза обьявлять переменную const без присвоения значения 
// TODO  значение const нельза переназначить, переприсвоить, переасайнить (но можно изменять само свойство внутри , если это не примитив)
//   const person = {
//   name: 'Kim Kardashian'
// }
// person = {} // Error
// person.name = 'Dasha'  // Ok!


var
// ! Для «var» не существует блочной области видимости
// ! Область видимости переменных var ограничивается либо функцией, либо, если переменная глобальная, то скриптом.
// ! Такие переменные доступны за пределами блока.

// ! Переменные объявленные черех 'var' - становятся свойством глобального обьекта Window.

// ! Объявление переменных «var» выполняются до выполнения кода (как с function declaration). Именно Объявление,
// ! присвоение (инициализация значения) происходит, когда до этого дойдет выполнение кода
//   var bar;
//   console.log(bar); // выведет undefined
//   var bar = 111;
//   console.log(bar); // выведет 111  
//! если внутри функции инициализируется переменная (не объявленная нигде ранее, то неявно происходит ее обьявление в global scope)

// из 30 строки неявно происходит var y = 1 ;
var x = 0;

function f() {
    var x = y = 1;
    // x - объявляется локально ( и = 1 но console.log покажет значение глобальной x).  y - глобальная со значение 1 (т.к. ранее не обьявлялась)!
}
f();
console.log(x, y); // 0, 1
// значение x взято из глобальной переменной, как и ожидалось
// значение переменной y доступно глобально


// ?  у var нет блочной области видимости + цикл выполняется быстрее чем асинхронная операция =>
// ?      => полсле последней итерации i++ увеличивает конечное значение i на единицу, затем log из setTimeout выводит 5 раз увеличенное значение
for (var i = 0; i < 5; i++) {
    setTimeout(() => {
        console.log(i) // 5,5,5,5,5
    }, i * 500)
}
// ?  пути решения:  использовать let
for (let i = 0; i < 5; i++) {
    setTimeout(() => {
        console.log(i) // 0,1,2,3,4
    }, i * 500)
}
// ? обернуть setTimeout IIFE и при ее вызове передать ей i по итогу  log будет брать актуальное значение на момент итерации цикла из замыкания 
for (var i = 0; i < 5; i++) {
    //* IIFE (Immediately Invoked Function Expression)
    ((m) => {
        setTimeout(() => {
            console.log(m) // 0,1,2,3,4
        }, i * 500)
    })(i)
}